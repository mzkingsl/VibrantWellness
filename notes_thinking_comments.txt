- first, the backend:  
    - I set up Go with `go.mod` and ran `go run github.com/99designs/gqlgen@latest generate` to turn my GraphQL schema into actual Go code  
       - gives me type-safe models and resolver stubs right out of the box  
    - then i hit `go run .` so the server spins up at `http://localhost:8080/graphql`  
    - i manually tested the backend at localhost:8080/graphql before continuing

- now, the frontend:  
    - in another terminal i ran `npm install` (or `yarn install`/`pnpm install`) to grab Vue, Apollo, Vite, etc.  
    - i created a `.env` file with my `VITE_GOOGLE_MAPS_API_KEY` and pointed `VITE_GRAPHQL_ENDPOINT` at `http://localhost:8080/graphql`  
    - i ran into CORS issues, and i navigated this by explicitly allowing headers before graphql handler by wrapping in cors middleware

- making the typeahead work (typeahead â†” map):  
    - the Typeahead component fires GraphQL queries as i type, caching the full state list on load since it's small
    - on each keystroke i filter locally and show suggestions  
    - hovering a suggestion emits an event that the GoogleMap component picks up, fits the right bounds, and highlights the polygon  

- putting it all together:  
    - i created dockerfiles for both the Go server and the Vue frontend
    - the Go server uses `golang:1.24-alpine` and the Vue frontend uses `node:23-bullseye-slim`
    - i set up a docker-compose file to run both containers together
    - the Go server runs on port 8080 and the Vue frontend on port 5173
    - i used `docker-compose up --build` to start both containers and `docker-compose down` to stop them


Notes:
- a bunch of files were auto-generated by gqlgen, and the vue installation so i didn't write them

